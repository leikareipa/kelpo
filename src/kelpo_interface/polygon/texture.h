#ifndef KELPO_INTERFACE_POLYGON_TEXTURE_H
#define KELPO_INTERFACE_POLYGON_TEXTURE_H

#include <kelpo_interface/stdint.h>

struct kelpo_polygon_texture_s
{
    unsigned width, height;

    /* The texture's pixels in 16-bit ARGB 1555 format for each mip level. Level
     * 0 is the base texture; each further mip level is one half of the previous
     * level in its dimensions, so e.g. #0: 128 x 128, #1: 64 x 64, #2: 32 x 32,
     * all the way down to 1 x 1. There can be at most 9 mip levels, so each
     * texture must have a side length of at most 256 pixels. Textures smaller
     * than 256 pixels per side do not need (nor use) all of the 9 mip levels.*/
    uint16_t *mipLevel[9];
    unsigned numMipLevels;
    
    /* A value that identifies this texture with the specific render API used.
     * For instance, with OpenGL, this might be the value generated by a call
     * to glGenTextures().*/
    uint32_t apiId;

    /* Additional storage for the render API, in case it needs it.*/
    void *apiAuxData;

    /* Note: Assume that each flag will be initialized to 0 by default.*/
    struct kelpo_polygon_texture_flags_s
    {
        /* Sample... 1 = nearest neighbor, 0 = bilinear (or the like).*/
        unsigned noFiltering : 1;

        /* UV wrap... 1 = clamp, 0 = repeat.*/
        unsigned clamped : 1;

        /* Mipmapping... 1 = off regardless of 'mipLevel', 0 = enabled as per
         * 'mipLevel'. Note that the texture's full mip levels may still be
         * uploaded into video memory even if rendering them is disabled via
         * this flag.*/
        unsigned noMipmapping : 1;
    } flags;
};

#endif
