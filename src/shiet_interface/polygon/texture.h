#ifndef SHIET_INTERFACE_POLYGON_TEXTURE_H
#define SHIET_INTERFACE_POLYGON_TEXTURE_H

#include <shiet_interface/common/stdint.h>

struct shiet_polygon_texture_s
{
    unsigned width, height;

    /* A 128-bit hash of the base mip level's pixel data. May be used as a unique
     * identifier to distinguish this texture from others.*/
    uint8_t pixelHash[16];

    /* The texture's pixels in 16-bit ARGB 1555 format for each mip level. Level
     * 0 is the base texture; each further mip level is one half of the previous
     * level in its dimensions, so e.g. #0: 128 x 128, #1: 64 x 64, #2: 32 x 32,
     * all the way down to 1 x 1. There can be at most 9 mip levels, so each
     * texture must have a side length of at most 256 pixels. Textures smaller
     * than 256 pixels per side do not need (nor use) all of the 9 mip levels.*/
    uint16_t *mipLevel[9];
    unsigned numMipLevels;
    
    /* A value that identifies this texture with the specific render API used.
     * For instance, with OpenGL, this might be the value generated by a call
     * to glGenTextures().*/
    uint32_t apiId;

    /* Note: Assume that each flag will be initialized to 0 by default.*/
    struct shiet_polygon_texture_flags_s
    {
        unsigned noFiltering : 1;  /* Sample... 1 = nearest neighbor, 0 = bilinear (or the like) */
        unsigned clamped : 1;      /* UV wrap... 1 = clamp, 0 = repeat                           */
    } flags;
};

/* Used by the render API to keep track of textures that have been uploaded to
 * the render device.*/
struct shiet_polygon_texture_uploaded_s
{
    unsigned width, height;
    
    /* A 128-bit hash of the base mip level's pixel data. May be used as a unique
     * identifier to distinguish this texture from others.*/
    uint8_t pixelHash[16];

    /* A value that identifies this texture with the specific render API used.
     * For instance, with OpenGL, this might be the value generated by a call
     * to glGenTextures(), and for Direct3D a direct pointer to texture memory.*/
    uint32_t apiId;

    /* Any custom data the render API might want to use.*/
    void *apiData;
};

#endif
